/**
 * This file is generated by code generation tools.
 * Generation time is Tue Jun 02 21:27:43 CST 2015
 */
package com.flying.ams.msg.converter;

import com.flying.common.IReturnCode;
import com.flying.util.net.CommUtils;
import uk.co.real_logic.sbe.codec.java.DirectBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.flying.ams.service.AccountServiceException;
import com.flying.ams.msg.gen.GetAccountByIdReply;
import com.flying.ams.msg.gen.GetAccountByIdRequest;
import com.flying.ams.msg.gen.MessageHeader;
import com.flying.ams.msg.IAccountMsgType;
import com.flying.ams.model.AccountBO;

public class AccountMsgCodec implements IAccountMsgCodec {
    private static Logger logger = LoggerFactory.getLogger(AccountMsgCodec.class);
    public GetAccountByIdRequest getGetAccountByIdRequest(byte[] msg){
        // headerClass, varHeader, varBytes, requestClass, varRequest
        MessageHeader header = new MessageHeader();
        DirectBuffer requestBuffer = new DirectBuffer(msg);
        header.wrap(requestBuffer, 0, 0);
        GetAccountByIdRequest request = new GetAccountByIdRequest();
        request.wrapForDecode(requestBuffer, header.size(), header.blockLength(), header.version());
        return request;
    }
    public byte[] getGetAccountByIdRequestMsg(long aid) throws AccountServiceException{
        // headerClass, varHeader, requestClass, varRequest, msgTypeClass, stringContained, varField, exception
		MessageHeader header = new MessageHeader();
        GetAccountByIdRequest request = new GetAccountByIdRequest();
        DirectBuffer requestBuffer = new DirectBuffer(new byte[header.size() + request.sbeBlockLength()]);
        // Build the report message, header first and then body.
        header.wrap(requestBuffer, 0, request.sbeSchemaVersion()).blockLength(request.sbeBlockLength())
                .templateId(request.sbeTemplateId()).schemaId(request.sbeSchemaId()).version(request.sbeSchemaVersion())
                .timestamp(System.currentTimeMillis()).sourceIP(CommUtils.getLocalIp4AddressAsInt())
                .msgType(IAccountMsgType.GetAccountByIdRequest);
        
            request.wrapForEncode(requestBuffer, header.size()).aid(aid);
        
        return requestBuffer.array();
    }
    public byte[] getGetAccountByIdReplyMsg(int retCode,AccountBO accountBO){
        // headerClass, varHeader, replyClass, varReply, msgTypeClass, varFields, varDTOFields, stringContained.
        MessageHeader header = new MessageHeader();
        GetAccountByIdReply reply = new GetAccountByIdReply();
        byte[] replyBytes = new byte[header.size() + reply.sbeBlockLength()];
        DirectBuffer replyBuffer = new DirectBuffer(replyBytes);
        header.wrap(replyBuffer, 0, reply.sbeSchemaVersion()).blockLength(reply.sbeBlockLength())
                .templateId(reply.sbeTemplateId()).schemaId(reply.sbeSchemaId()).version(reply.sbeSchemaVersion())
                .timestamp(System.currentTimeMillis()).sourceIP(CommUtils.getLocalIp4AddressAsInt())
                .msgType(IAccountMsgType.GetAccountByIdReply);
        reply.wrapForEncode(replyBuffer, header.size()).retCode(retCode);
        if (retCode!=IReturnCode.SUCCESS) return replyBytes;
        if (accountBO != null) {
            
            reply.aid(accountBO.getAid()).type(accountBO.getType()).custId(accountBO.getCustId()).parentId(accountBO.getParentId()).statusId(accountBO.getStatusId()).createTime(accountBO.getCreateTime()).updateTime(accountBO.getUpdateTime());
            
        }
        return replyBytes;
    }
    public AccountBO getGetAccountByIdReply(byte[] bytes) throws AccountServiceException{
        // headerClass, varHeader, varBytes, replyClass, varReply, dtoClass, varDTO, stringContained, varDTOFields, exception
        MessageHeader header = new MessageHeader();
        DirectBuffer replyBuffer = new DirectBuffer(bytes);
        header.wrap(replyBuffer, 0, 0);
        if (header.msgType() != IAccountMsgType.GetAccountByIdReply) {
            throw new AccountServiceException(AccountServiceException.MISMATCH_REPLY, "expected:" + IAccountMsgType.GetAccountByIdReply + "actual:" + header.msgType());
        }
        GetAccountByIdReply reply = new GetAccountByIdReply();
        reply.wrapForDecode(replyBuffer, header.size(), header.blockLength(), header.version());
        if (reply.retCode() != IReturnCode.SUCCESS) {
            throw new AccountServiceException(reply.retCode());
        }
        // Analyze the reply and build dto.
        AccountBO accountBO = new AccountBO();
        
                accountBO.setAid(reply.aid());
        accountBO.setType(reply.type());
        accountBO.setCustId(reply.custId());
        accountBO.setParentId(reply.parentId());
        accountBO.setStatusId(reply.statusId());
        accountBO.setCreateTime(reply.createTime());
        accountBO.setUpdateTime(reply.updateTime());

        
        return accountBO;
    }
    public short getMsgType(byte[] msg){
        // headerClass, varHeader, varBytes, varFields
        MessageHeader header = new MessageHeader();
        DirectBuffer buffer = new DirectBuffer(msg);
        header.wrap(buffer, 0, 0);
        return header.msgType();
    }

}
