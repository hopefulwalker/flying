        // headerClass, varHeader, replyClass, varReply, varDTOs, msgDTOClass, msgTypeClass, varFields, varMsgDTO
        // varDTO, dtoClass, varDTOFields
        @{headerClass} @{varHeader} = new @{headerClass}();
        @{replyClass} @{varReply} = new @{replyClass}();
        int numInGroup = (@{varDTOs} == null) ? 0 : @{varDTOs}.size();
        byte[] replyBytes = new byte[@{varHeader}.size() + @{varReply}.sbeBlockLength() +
                @{replyClass}.@{msgDTOClass}.sbeHeaderSize() + @{replyClass}.@{msgDTOClass}.sbeBlockLength() * numInGroup];
        DirectBuffer replyBuffer = new DirectBuffer(replyBytes);
        @{varHeader}.wrap(replyBuffer, 0, @{varReply}.sbeSchemaVersion()).blockLength(@{varReply}.sbeBlockLength())
                .templateId(@{varReply}.sbeTemplateId()).schemaId(@{varReply}.sbeSchemaId()).version(@{varReply}.sbeSchemaVersion())
                .sourceIP(CommUtils.getLocalIp4AddressAsInt()).timestamp(System.currentTimeMillis())
                .msgType(@{msgTypeClass}.@{replyClass});
        @{varReply}.wrapForEncode(replyBuffer, @{varHeader}.size())@{varFields}; //requestNo(requestNo).retCode(retCode);
        if (@{varRetCode}!=IReturnCode.SUCCESS) return replyBytes;
        @{replyClass}.@{msgDTOClass} @{varMsgDTO} = @{varReply}.@{varMsgDTO}Count(numInGroup);
        if (numInGroup > 0) {
            @if{stringContained} try { @end{}
                for (@{dtoClass} @{varDTO} : @{varDTOs}) {
                    @{varMsgDTO}.next()@{varDTOFields};
                            //putUuid(serverBO.getUuid())
                            //.putRegion(serverBO.getRegion())
                            //.serviceType(serverBO.getServiceType())
                            //.putName(serverBO.getName())
                            //.putEndpoint(serverBO.getEndpoint())
                            //.reportTime(serverBO.getReportTime());
                }
            @if{stringContained}} catch (UnsupportedEncodingException uee) {
                logger.error("Error in building reply", uee);
                @{varReply}.retCode(IReturnCode.UNSUPPORTED_ENCODING);
            }@end{}
        }
        return replyBytes;