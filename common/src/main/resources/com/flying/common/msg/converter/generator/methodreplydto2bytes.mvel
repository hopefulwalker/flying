        // headerClass, varHeader, replyClass, varReply, msgTypeClass, varFields, varDTOFields, stringContained.
        @{headerClass} @{varHeader} = new @{headerClass}();
        @{replyClass} @{varReply} = new @{replyClass}();
        byte[] replyBytes = new byte[@{varHeader}.size() + @{varReply}.sbeBlockLength()];
        DirectBuffer replyBuffer = new DirectBuffer(replyBytes);
        @{varHeader}.wrap(replyBuffer, 0, @{varReply}.sbeSchemaVersion()).blockLength(reply.sbeBlockLength())
                .templateId(@{varReply}.sbeTemplateId()).schemaId(@{varReply}.sbeSchemaId()).version(@{varReply}.sbeSchemaVersion())
                .timestamp(System.currentTimeMillis()).sourceIP(CommUtils.getLocalIp4AddressAsInt())
                .msgType(@{msgTypeClass}.@{replyClass});
        @{varReply}.wrapForEncode(replyBuffer, @{varHeader}.size())@{varFields};
        if (@{varRetCode}!=IReturnCode.SUCCESS) return replyBytes;
        if (@{varDTO} != null) {
            @if{stringContained} try { @end{}
            @{varReply}@{varDTOFields};
            @if{stringContained}} catch (UnsupportedEncodingException uee) {
                logger.error("Error in building reply", uee);
                @{varReply}.retCode(IReturnCode.UNSUPPORTED_ENCODING);
            }@end{}
        }
        return replyBytes;